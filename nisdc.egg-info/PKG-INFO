Metadata-Version: 2.1
Name: nisdc
Version: 20.0.0
Summary: NI Semiconductor Device Control python Support provides python APIs to develop python test programs and communicate with a device using the setup configuration exported from the Semiconductor Device Control Add-On for InstrumentStudio.
Home-page: UNKNOWN
Author: National Instruments
Author-email: support@ni.com
Maintainer: National Instruments
Maintainer-email: support@ni.com
License: Copyright (c) 2019, National Instruments Corp.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Description: # About
        NI Semiconductor Device Control Python API Support provides Python APIs and examples to develop python test programs and communicate with a device using the setup configuration exported from the Semiconductor Device Control Add-On for InstrumentStudio.
        
        This library is dependent on Semiconductor Device Control addon for InstrumentStudio.
        
        
        # Semiconductor Device Control Python API Status
        
        ** Setup and cleanup functions  **  
        1. Instantiate - using IS configuration file  
        2. Destroy  
        3. Start  
        4. Stop  
        ** Hardware Read & Write to Register and Field  **  
        5. Write Register by name (Device)  
        6. Read Register by name (Device)  
        7. Write Register by Address (Device)  
        8. Read Register by Address (Device)  
        9. Write Field by Name (Device)  
        10. Read Field by Name (Device)  
        11. Write Field by value definition (Device)  
        ** Hardware multiple Read & Write to Register and Field  **  
        12. Write Multiple Register by Name (Device)  
        13. Read Multiple Register by name (Device)  
        14. Write Multiple Register by Address (Device)  
        15. Read Multiple Register by Address (Device)  
        16. Write Multiple Fields by Name (Device)  
        18. Read Multiple Field by Name (Device)  
        ** Cache Read & Write to Register and Field  **  
        19. Write Register by name (Cache)  
        20. Read Register by name (Cache)  
        21. Write Register by Address (Cache)  
        22. Read Register by Address (Cache)  
        23. Write Field by Name (Cache)  
        24. Read Field by Name (Cache)  
        25. Write Field by value definition (cache)  
        26. Write from Cache to Device  
        27. Clear Cache  
        ** Cache multiple Read & Write to Register and Field  **  
        28. Write Multiple Register by Name (Cache)  
        29. Read Multiple Register by name (Cache)  
        30. Write Multiple Register by Address (Cache)  
        31. Read Multiple Register by Address (Cache)  
        32. Write Multiple Fields by Name (Cache)  
        33. Read Multiple Field by Name (Cache)  
        ** DIO operation  **  
        34. Write Pin State  
        35. Read Pin State  
        
        
        # Installation
        
        ** Dependency Installation **  
        1. Semiconductor Device Control addon for InstrumentStudio 2019 - `ni download <update the download link>`_.  
        2. pythonnet 2.5.1 - [pypi download](https://pypi.org/project/pythonnet/#description)  
        
        ** Work with github source code **  
        3. Clone the github repository - '[semiconductor device control python api github repo]<link>'_ 
        4. Use the APIs from 'nisdc' folder in your program  
        
        ** Work with Semiconductor Device Control Python API from pypi **  
        3. Go to Semiconductor Device Contro Python API location in `pypi <ni pypi download link>`_.  
        4. Install the package and use the api libraries in your program  
        
        # Usage
        
        Reference example is available in the 'github repository <link>'_ for developers (under examples folder), to refer on how to use the python APIs in the test program.
        
        # Documentation
        
        Documentation is available from ni resource website - [here](https://www.ni.com/documentation/en/semiconductor-device-control/latest/manual/manual-overview/).
        
        # Contributing
        
        We welcome contributions! You can clone the project repository, make changes, build it, and install it by [following these instructions](CONTRIBUTING.md). This also has instruction on how to contribute your changes back to the main repository.
        
        # Bugs / Feature Requests
        
        To report a bug or submit a feature request specific feature, please use the `GitHub issues page <>`_.
        
        Fill in the issue template as completely as possible and we will respond as soon
        as we can.
        
        For hardware support or any other questions not specific to this GitHub project, please visit [NI Community Forums](https://forums.ni.com/).
        
        # License
        
        [License file](LICENSE)
        
        **semi device control python api** is licensed under an MIT-style license
        Other incorporated projects may be licensed under different licenses. All
        licenses allow for non-commercial and commercial use.
        
Keywords: nisdc,nisemidevicecontrol
Platform: UNKNOWN
Classifier: Intended Audience :: Semiconductor Validation Developers
Classifier: Intended Audience :: Semiconductor Validation Users
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >= 3.6, < 3.9
Description-Content-Type: text/x-md
